{
  "name": "Caffe framework",
  "tagline": "",
  "body": "# Caffe Installation In Ubuntu with GPU support\r\n\r\nThe step by step processes of caffe installation in `Ubuntu(14.04)` is provided here. \r\n\r\n### Hardware & cuda version\r\nThe following installation has been implemented and successfully tested on [CUDA 8.0](http://on-demand.gputechconf.com/gtc/2016/webinar/cuda-8-features-overview.pdf) and [NVIDIA TITAN X(Pwered by Pascal) GPU](http://www.geforce.com/hardware/10series/titan-x-pascal). However the method can simply be used for older version of `CUDA` and older `GPU architectures`.\r\n\r\n### CUDA installation\r\n\r\nFor the [NVIDIA TITAN X(Pwered by Pascal) GPU](http://www.geforce.com/hardware/10series/titan-x-pascal), installing CUDA 8.0 is necessary. The CUDA 8.0 download file and installation procedure can be found [here](https://developer.nvidia.com/cuda-downloads). The system platform has to be chosen as the following image: ![](images/Select Target Platform.png).\r\n\r\nFirst using the terminal go to the folder that the downloaded `.deb` file is located. Now the installation has to be done as follows:\r\n\r\n```\r\nsudo dpkg -i cuda-repo-ubuntu1404-8-0-local_8.0.44-1_amd64.deb\r\nsudo apt-get update\r\nsudo apt-get install cuda\r\n```\r\n\r\nIt is worth mentioning that, the described procedure is the straight-forward approach of installing CUDA. Issues like `black screen`, `stuck in login page` and other incompatibilities may happen which are beyond the scope of this documentation.\r\n\r\nThe last step of installation CUDA is to add the path of it to `source bash file`:\r\n```\r\nsudo gedit ~/.bashrc\r\n```\r\n\r\nThe the two following line must be added to the file with regard to `CUDA 8.0` installation:\r\n\r\n```\r\nexport PATH=/usr/local/cuda-8.0/bin:$PATH\r\nexport LD_LIBRARY_PATH=/usr/local/cuda-8.0/lib64:$LD_LIBRARY_PATH\r\n```\r\n\r\n#### CUDA preinstallation\r\nBefore installation of CUDA, It is recommended to uninstall all NVIDIA drivers:\r\n```\r\nsudo apt-get purge nvidia*\r\n```\r\nStill some of the modules might be stuck in the kernel. Get their names by:\r\n```\r\ndkms status\r\n```\r\nThe output should be as follows:\r\n```\r\nnvidia-current-updates, \"module_version\", \"kernel_version\", x86_64: installed\r\n```\r\n`Module version` and `kernel version` are of format `304.4` and `3.1.0-36-generic` respectively. These modules should be removed by the following command:\r\n```\r\nsudo dkms remove nvidia-current-updates/module_version -k kernel_version\r\n```\r\nNow the CUDA can safely be installed using the aforementioned procedure in the previous section.\r\n\r\nAlternatively `current-updates` can be used since it is a package that is cloned from NVIDIAâ€™s releases,\r\nbut it is officially tested and packaged by Ubuntu. The command is as follows:\r\n```\r\nsudo apt-get install nvidia-current-updates nvidia-settings-updates\r\n```\r\n\r\n\r\n\r\n### Preinstallation and CUDA compatibility\r\nNow the assumption is that the [CUDA](http://docs.nvidia.com/cuda/cuda-installation-guide-linux/#axzz4MnU6Gq6E) is already installed.\r\n\r\nCheck the supporting GPU(s) and Ubuntu version using the following command:\r\n\r\n```\r\nlspci | grep -i nvidia\r\nuname -m && cat /etc/*release\r\n gcc --version\r\n```\r\n\r\n### CuDNN Installation\r\n\r\nFor increasing the performance(loosly speaking and not necessarily) installing [CuDNN](https://developer.nvidia.com/cudnn) is recommended.\r\nAfter downloading the relevent file to the system, assume the file is downloaded and extracted in the <directory> under\r\nthe name of `cuda`. the go to the folder which `cuda` is there and run the following:\r\n\r\n```\r\nsudo cp -P cuda/include/cudnn.h /usr/local/cuda/include\r\nsudo cp -P cuda/lib64/libcudnn* /usr/local/cuda/lib64\r\nsudo chmod a+r /usr/local/cuda/include/cudnn.h /usr/local/cuda/lib64/libcudnn*\r\n```\r\n\r\nMoreover the path to the CuDNN library must be added to system path as follows:\r\n```\r\ncd <installpath>\r\n    export LD_LIBRARY_PATH=`pwd`:$LD_LIBRARY_PATH\r\n```\r\n\r\n## Caffe Installation Using Python\r\nCaffe has different dependencies which are required by its structure. In the following subsections an abstract list of these dependencies and the commands for installing them are provided. Depending on the available installed packages on the system, more or less dependencies might be required.\r\n\r\nThe Caffe installation in this documentation uses the build-in python of the 'Ubuntu-Trusty(14.04)'. However 'Anaconda-based' installation can be performed but it is not required as for the moment it has more incompatibilies and may make the installation more complicated.\r\n\r\n**WARNING:** make sure the `Python` recognized by the system is the `default built-in Python` by the ubuntu and *Anaconda does not own the path* for python. You can check that with the following command which returns the root pf python:\r\n\r\n```\r\nwhich python\r\n```\r\nBasically you need to check that the Anaconda is not installed or the `default Python` does not belongs to the `Anaconda path`. With this check-up you can make sure that the `Caffe` installation does not point to the wrong path. This step is crucial for using `Python interface` of the `Caffe`.\r\n\r\n### Installing git, BLAS and unzip\r\n`BLAS` can be used as the backend of matrix and vector computations of Caffe. There are different implementations of this library. [OpenBLAS](http://www.openblas.net/) has been chosed. \r\n```\r\nsudo apt-get install libopenblas-dev git unzip\r\n```\r\nAlternatively you can refer to [OpenBLAS repository](https://github.com/xianyi/OpenBLAS).\r\n\r\n### Install OpenCV\r\nThe [OpenCV](https://help.ubuntu.com/community/OpenCV) is the well-known open-source computer vision library.\r\n\r\nThere are three suggested way for installing OpenCV.\r\n\r\n#### Using bash script files\r\n1. Install directly by going to [this link](https://github.com/astorfi/Caffe_Framework/tree/master/Installation/OpenCV_Installation) and using one of the \"OpenCV.sh\" or \"OpenCV_Alternative.sh\" bash script files available in this repository.\r\n * The second file is more abstract and installs less dependancies. This may lead to have less conflicts and incompatibilties.\r\n2. Install as follows for the particular version:\r\n * The first two files are the edited version of the second method.\r\n```\r\nwget https://raw.githubusercontent.com/jayrambhia/Install-OpenCV/master/Ubuntu/2.4/opencv2_4_9.sh\r\nchmod +x opencv2_4_9.sh \r\n./opencv2_4_9.sh\r\n```\r\nHowever by using this method, [unsupported gpu architecture](http://stackoverflow.com/questions/28010399/build-opencv-with-cuda-support) error has been reported. Most like this is due to requirements of some `OpenCV` installations to define the \"CUDA_GENERATION\" explicitly.\r\n#### Install from the source\r\nInstall using the source from the [source](http://docs.opencv.org/2.4/doc/tutorials/introduction/linux_install/linux_install.html)\r\n\r\n### Install other dependecies(Boost,...)\r\n```\r\nsudo apt-get update\r\nsudo apt-get install python-skimage\r\nsudo apt-get install libboost-all-dev\r\nsudo apt-get install libprotobuf-dev libleveldb-dev libsnappy-dev libopencv-dev libboost-all-dev libhdf5-serial-dev\r\nsudo apt-get install libgflags-dev libgoogle-glog-dev liblmdb-dev protobuf-compiler\r\nsudo apt-get install libatlas-base-dev\r\n```\r\n\r\n### Install protobuf\r\n\r\nFor protobuf installation, simple `pip installation` is recommended.\r\n```\r\nsudo pip install protobuf\r\n```\r\n\r\nYou may need to install `pip` before installation of the `protobuf`.\r\n\r\n### Clone and Install Caffe from Source\r\nIn this phase, the Caffe repository must be cloned and install:\r\n\r\n```\r\ngit clone https://github.com/BVLC/caffe\r\n```\r\n\r\nAfter going to code directory, a copy of `Makefile.config.example` file under the new name of `Makefile.config` must be make to be modified if necessary.\r\n```\r\ncd caffe\r\ncp Makefile.config.example Makefile.config\r\n```\r\nFor making any modification, the `Makefile.config` must be edited. Here's are few possible modifications:\r\n\r\n* The CuDNN can be activated using the assigned flag.\r\n* Instead of Python, Anaconda can be used by changing the associated paths.\r\n* The default is using GPU but if the \"CPU_ONLY := 1\" is activated, then there is no GPU support!\r\n\r\nIn the end we can compile and make all the test files:\r\n```\r\nmake all\r\nmake test\r\n```\r\nIt is worth mentioning that `-jX` command can be added to the above commands to increase the speed of process. `X` is the \r\nnumber of supported CPU cores.\r\n\r\n### Installing Pycaffe\r\nFor having a python interface for the caffe use the following:\r\n```\r\ncd python\r\nfor req in $(cat requirements.txt); do sudo pip install $req; done\r\ncd ..\r\nmake pycaffe\r\n```\r\nIn the above terminal commands the assumption is that we are in the `$CAFFE_ROOT`. The `sudo` part is to overcome the\r\n`permission denied` issue while installing dependencies. However adding `sudo` has not been mentioned as part of the\r\ndocumentation provided by the [official Caffe installation](http://caffe.berkeleyvision.org/installation.html#prerequisites), it demonstrated incompatibility by ignoring `sudo`.\r\n\r\nWARNING: The above requirement must be installed in the default python which is in the root otherwise the cannot be recognized by the `pycaffe`. However using the command `sudo apt-get install python-skimage` probably immune the installation from its last part which is installing the dependencies defined in the `requirements.txt` file.\r\n\r\nIn the end we can run all the tests:\r\n```\r\nmake runtest\r\n```\r\n\r\n### Alternatinve Method\r\n\r\nAnother way for considering the procedure of the installation is to to the following:\r\n```\r\ncd python\r\nfor req in $(cat requirements.txt); do sudo pip install $req; done\r\ncd ..\r\n```\r\n\r\nThen make all the necessary elements:\r\n```\r\nmake all\r\nmake pycaffe\r\nmake test\r\nmake runtest\r\n```\r\n\r\nNow add the following to the `source bash file`:\r\n```\r\nexport CAFFE_ROOT=/path/to/caffe (ex: /home/username/caffe)\r\nexport PYTHONPATH=$CAFFE_ROOT/python:$PYTHONPATH\r\n```\r\n\r\n### Installation check\r\n\r\nBy using the following command check if the `Caffe` is already installed and can be loaded by `Pycaffe`:\r\n```\r\npython\r\nimport caffe\r\n```\r\n\r\n**CAVEAT:** If you cannot import `Caffe` that does not mean `Caffe` is not installed! Passing all tests in the previous phase\r\nguaranties the success of installation `Caffe`. However not being able to import caffe after running python is related to the pycaffe interface.\r\n\r\n### Reported Issue\r\nThen it might be necessary to copy appropriete files be copied in order to prevent [this issue](https://github.com/BVLC/caffe/issues/1463).\r\n```\r\nsudo cp libhdf5_hl.so.7 libhdf5_hl.so.8\r\nsudo cp libhdf5.so.7 libhdf5.so.8\r\n```\r\n\r\n\r\n## Caffe Installation Using Anaconda\r\n\r\nAt this moment the assumption is that the user wants to install `Anaconda` and use the `Caffe`. So after `Python Installation Procedure`, few modifications must be done.\r\n\r\n### Download\r\n\r\nAnaconda must be downloaded from its [website](https://www.continuum.io/downloads). `Anaconda Python 2.7` is recommended.\r\n\r\n### Editing the bash file\r\n\r\nThe following two command should be added to the end of `source bash file`. However based on the experiments the necessity of the second one has not been proven! \r\n```\r\nexport PATH=\"/home/username/anaconda/bin:$PATH\"\r\nexport LD_LIBRARY_PATH=/home/username/anaconda/lib:$LD_LIBRARY_PATH\r\n\r\n```\r\n\r\n### Installing protobuf\r\nThe protobuf should be installed this time using `conda`:\r\n```\r\nconda install protobuf\r\n```\r\n\r\n## Using Pycharm or other IDEs\r\n\r\nIn order to use the IDE and importing Caffe, The IDE(ex: Pycharm) *must be run from the terminal*.\r\n\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}